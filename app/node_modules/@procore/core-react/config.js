const path = require('path')
const BundleAnalyzer = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
const prefixer = require('postcss-prefixer')
const {
  addPlugins,
  babel,
  css,
  createConfig,
  customConfig,
  entryPoint,
  env,
  file,
  match,
  postcss,
  sass,
  setOutput,
  sourceMaps,
  uglify,
} = require('webpack-blocks')

const package = require('./package.json')

const version = package.version.split('-')[0].replace(/\./g, '_')

const localIdentName = (module.exports = entry =>
  createConfig([
    entryPoint(entry),

    setOutput({
      filename: '[name].js',
      path: path.resolve('./lib'),
      libraryTarget: 'umd',
    }),

    babel(),

    match('*.png', [file()]),

    match(`*.scss`, { exclude: path.resolve('node_modules') }, [
      env('production', [
        css.modules({
          minimize: true,
          localIdentName: `[hash:base64:5]-${version}`,
        }),
      ]),
      env('development', [
        css.modules({
          minimize: false,
          localIdentName: `[local]-[hash:base64:5]-${version}`,
        }),
      ]),
      postcss({ plugins: [prefixer({ prefix: 'core-' })] }),
      sass(),
    ]),

    env('development', [
      sourceMaps(),
      addPlugins([new BundleAnalyzer({ openAnalyzer: false })]),
    ]),

    env('production', [uglify()]),

    customConfig({
      externals: {
        react: 'umd react',
        'react-dom': 'umd react-dom',
        'prop-types': 'umd prop-types',
      },
    }),
  ]))
